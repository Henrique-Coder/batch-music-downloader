from os import makedirs, remove, getcwd
from pathlib import Path
from re import findall
from shutil import rmtree
from subprocess import run as subrun
from time import sleep, time
from tkinter import Tk, filedialog
from bs4 import BeautifulSoup
from music_tag import load_file as tag_load_file
from requests import get
from youtubesearchpython import SearchVideos
from colorama import init as init_colorama
from pytube import YouTube, Playlist, extract
from pytube.exceptions import (
    VideoUnavailable,
    AgeRestrictedError,
    LiveStreamError,
    VideoPrivate,
    RecordingUnavailable,
    MembersOnly,
    VideoRegionBlocked
)

from deps import (
    app_utils,
    create_deps
)

# Application settings
APP_VERSION = '1.1.0'
APP_NAME = 'BMD'
APP_MAIN_DIR = Path(getcwd(), APP_NAME)
APP_DEPS_DIR = Path(f'{APP_MAIN_DIR}/dependencies')
APP_ASSETS_DIR = Path(f'{APP_MAIN_DIR}/assets')
APP_TEMP_DIR = Path(f'{APP_MAIN_DIR}/.temp')

# Output application settings
OAPP_SONGS_DIR = Path('songs')

# Other settings
SONG_FORMAT = 'mp3'

# Base64 file codes
base64_favicon_ico = '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'
base64_explorer_ico = ''


# Initializing Colorama
init_colorama(autoreset=True)
Color = app_utils.Color


def get_yt_thumbnail_url(
    url: str, resolution: str = 'maxresdefault', hostname: str = 'i.ytimg.com'
) -> str:
    """
    Return the thumbnail URL from a YouTube video
    :param url: required, any YouTube video url
    :param resolution: optional, thumbnail resolution
    :param hostname: optional, hostname of the thumbnail
    :return: thumbnail url
    """

    # url: any YouTube video url
    # resolution: 'maxresdefault', 'sddefault', 'hqdefault', 'mqdefault' or 'default'
    # hostname: 'i.ytimg.com' or 'img.youtube.com'

    # Returns the URL of the thumbnail of a YouTube video
    return f'https://{hostname}/vi/{extract.video_id(url)}/{resolution}.jpg'


def enchance_music_file(yt, music_title: str) -> None:
    """
    Enchance the music file with the metadata, cover and re-encode it
    :param yt: required, youtube object
    :param music_title: required, music title
    :return: None
    """

    # Encoding the music file (by printing just one line of ffmpeg output in the terminal)
    input_music_dir = Path(f'{APP_TEMP_DIR}/songs/{music_title}.{SONG_FORMAT}')
    output_music_dir = Path(f'{OAPP_SONGS_DIR}/{music_title}.{SONG_FORMAT}')

    subrun(
        f'ffmpeg -i "{input_music_dir}" -b:a 320k -vn "{output_music_dir}" -y -hide_banner -loglevel quiet -stats',
        shell=True,
    )

    # Adds metadata to the music file
    publish_year = str(yt.publish_date).split('-')[0]

    f = tag_load_file(output_music_dir)
    f['artwork'] = open(Path(f'{APP_TEMP_DIR}/thumbnails/{music_title}.jpg'), 'rb').read()
    f['tracktitle'] = music_title
    f['artist'] = app_utils.fix_string(string=yt.author)
    f['year'] = publish_year
    f['albumartist'] = app_utils.fix_string(string=yt.author)
    f.save()

    # Delete the temporary music file and thumbnail
    remove(Path(f'{APP_TEMP_DIR}/songs/{music_title}.{SONG_FORMAT}'))
    remove(Path(f'{APP_TEMP_DIR}/thumbnails/{music_title}.jpg'))

    print(
        f'{Color.WHITE}[{Color.GREEN}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] '
        f'{Color.GREEN}Music successfully saved!\n'
    )

    app_env['success_downloads'] += 1


def download_music(url: str) -> None:
    """
    Download the music from the YouTube video and many other things
    :param url: required, any YouTube video url
    :return: None
    """

    total_attempts = 11
    retry_attempts = total_attempts
    retry_delay = 3

    while retry_attempts > 0:
        try:
            app_env['total_requests'] += 1
            retry_attempts -= 1

            yt = YouTube(url)
            music_title = app_utils.fix_string(string=yt.title)
            break
        except VideoRegionBlocked:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, because the song is {Color.BLUE}'
                f'blocked in your region{Color.RED}! Jumping to the next in the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except AgeRestrictedError:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, as the song is {Color.BLUE}'
                f'restricted to 18+ years old{Color.RED} and cannot be downloaded! Jumping to the next on the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except LiveStreamError:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, because the song is at {Color.BLUE}'
                f'live{Color.RED} and it is not possible to download it! Jumping to the next in the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except VideoPrivate:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, because the song is {Color.BLUE}'
                f'private{Color.RED} and cannot be accessed! Jumping to the next in the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except RecordingUnavailable:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, because the song is {Color.BLUE}'
                f'indisavailable{Color.RED}! Jumping to the next in the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except MembersOnly:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, because the music is {Color.BLUE}'
                f'exclusive to members{Color.RED} and cannot be downloaded! Jumping to the next on the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except VideoUnavailable:
            print(
                f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                f'Error when accessing the URL: {Color.BLUE}"{url}"{Color.RED}, because the song is {Color.BLUE}'
                f'indisavailable{Color.RED}! Jumping to the next in the list...\n'
            )
            app_env['failed_downloads'] += 1
            return
        except Exception:
            if retry_attempts == 0:
                print(
                    f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                    f'Jumping to the next on the list...\n'
                )
                return
            else:
                print(
                    f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] {Color.RED}'
                    f'Error on the {Color.BLUE}{total_attempts-retry_attempts}/{total_attempts-1}th {Color.RED}attempt! '
                    f'{Color.BLUE}Trying again...'
                )

                sleep(retry_delay)

    # Get the URL of the thumbnail and saves it in a variable
    try:
        thumbnail_url = get_yt_thumbnail_url(
            url=url, resolution='maxresdefault', hostname='i.ytimg.com'
        )

        # Download the song from YouTube
        if Path(Path(f'{OAPP_SONGS_DIR}/{music_title}.{SONG_FORMAT}')).is_file():
            print(
                f'{Color.WHITE}[{Color.YELLOW}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] '
                f'{Color.YELLOW}Music {Color.BLUE}"{music_title}" {Color.YELLOW} has already been downloaded!\n'
            )
            app_env['already_exists'] += 1
            return
        else:
            print(
                f'{Color.WHITE}[{Color.YELLOW}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] '
                f'{Color.YELLOW}Downloading music {Color.BLUE}"{music_title}"{Color.YELLOW}...'
            )

            makedirs(Path(f'{APP_TEMP_DIR}/songs'), exist_ok=True)

            yt_stream = yt.streams.filter(only_audio=True).get_audio_only()
            yt_stream.download(
                filename=f'{music_title}.{SONG_FORMAT}', output_path=Path(f'{APP_TEMP_DIR}/songs')
            )

            # Download the thumbnail if the song has already been downloaded
            makedirs(Path(f'{APP_TEMP_DIR}/thumbnails'), exist_ok=True)

            r = get(thumbnail_url, allow_redirects=True)
            open(Path(f'{APP_TEMP_DIR}/thumbnails/{music_title}.jpg'), 'wb').write(
                r.content
            )

            enchance_music_file(yt, music_title=music_title)
    except Exception as e:
        print(
            f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] '
            f'{Color.RED}Error downloading music {Color.BLUE}"{music_title}"{Color.RED}! Error: {Color.BLUE}{e}\n'
        )


def get_yt_url_from_query(query: str) -> str:
    """
    Searches the query on YouTube and returns the URL of the first result
    :param query: query to be searched on YouTube
    :return: url of the first result
    """

    # Searches the query on YouTube and returns the URL of the first result
    try:
        search = SearchVideos(query, offset=1, mode='dict', max_results=1)
        results = search.result()
        return results['search_result'][0]['link']
    except Exception as e:
        print(
            f'{Color.WHITE}[{Color.RED}{app_env["now_downloading"]}/{app_env["total_urls"]}{Color.WHITE}] '
            f'{Color.RED}Error when searching the song URL on YouTube! Error: {Color.BLUE}{e}\n'
        )


def get_musics_from_youtube_playlist_url(url: str) -> list:
    """
    Returns a list of the songs in a YouTube playlist
    :param url: url of the YouTube playlist
    :return: list of the songs
    """

    urls = list(
        Playlist(
            f'https://www.youtube.com/playlist?list={extract.playlist_id(url)}'
        ).video_urls
    )
    return urls


def get_musics_from_resso_playlist_url(url: str) -> list:
    """
    Returns a list of the songs in a Resso playlist
    :param url: url of the Resso playlist
    :return: list of the songs
    """

    website_content = get(url).content
    music_tags = BeautifulSoup(website_content, 'html.parser').find_all(
        'img',
        src=lambda value: value.startswith('https://p16.resso.me/img/')
        and value.endswith('.jpg'),
    )

    return [music['alt'] for music in music_tags[2:]]


def get_musics_from_resso_track_url(url: str) -> str:
    """
    Returns the song in a Resso track
    :param url: url of the Resso track
    :return: song title
    """

    web_content = get(url).content
    music_title = (
        BeautifulSoup(web_content, 'html.parser')
        .find('title')
        .text[:-30]
        .replace('Official Resso', '\b')
    )

    return music_title


def get_youtube_urls(query_list: list) -> list:
    """
    Returns a list of YouTube URLs from a list of queries
    :param query_list: list of queries
    :return: list of YouTube urls
    """

    regexes = {
        'youtube_playlist_url': r'^https?://(?:www\.|)youtu(?:\.be/|be\.com/(?:watch\?(?:.*&)?v=|embed/|v/)|\.com/'
        r'(?:(?:m/)?user(?:/[^/]+)?|c/[^\s/]+))([\w-]{11})(?:\S+)?(?:\?|\&)list=([\w-]+)',
        'youtube_video_url': r'^https?:\/\/(?:www\.)?youtube\.com\/watch\?v=[\w-]+(?![\w&=?+%-]*(?:list|playlist)'
        r'[\w&=?+%-]*)',
        'resso_playlist_url': r'^(?:https?://)?(?:www\.)?resso\.com/playlist/\d+.*|(?:https?://)?m\.resso\.com/\w+.*$',
        'resso_track_url': r'https:\/\/www\.resso\.com\/track\/[a-zA-Z0-9-]+\/[a-zA-Z0-9-_%?=&]+',
        'title': r'.*',
    }

    youtube_urls = list()
    for query in query_list:
        for source, regex in regexes.items():
            match = findall(regex, query)
            if match:
                if source == 'youtube_playlist_url':
                    new_urls = get_musics_from_youtube_playlist_url(url=query)
                    youtube_urls.extend(new_urls)
                elif source == 'youtube_video_url':
                    youtube_urls.append(query)
                elif source == 'resso_playlist_url':
                    names = get_musics_from_resso_playlist_url(url=query)
                    new_urls = get_youtube_urls(names)
                    youtube_urls.extend(new_urls)
                elif source == 'resso_track_url':
                    name = get_musics_from_resso_track_url(url=query)
                    new_url = get_yt_url_from_query(query=name)
                    youtube_urls.append(new_url)
                elif source == 'title':
                    new_url = get_yt_url_from_query(query=query)
                    youtube_urls.append(new_url)
                break
    return youtube_urls


# Create application environment
app_env = {
    'total_urls': 0,
    'now_downloading': 0,
    'success_downloads': 0,
    'already_exists': 0,
    'failed_downloads': 0,
    'total_requests': 0,
}

# Check internet connection
if not app_utils.is_internet_connected:
    input(
        f'{Color.WHITE}[{Color.RED}✖{Color.WHITE}] {Color.RED}Unstable internet connection! '
        f'{Color.YELLOW}Press ENTER or anything else to exit...'
    )
    exit()

# Check if app is up to date
app_utils.app_update_checker(app_version=APP_VERSION)

# Get application assets
create_deps.application_dirs(app_main_dir=APP_MAIN_DIR)
create_deps.base64_to_file(base64_code=base64_favicon_ico, output_dir=APP_MAIN_DIR, output_filename='favicon.ico')
create_deps.base64_to_file(base64_code=base64_explorer_ico, output_dir=APP_ASSETS_DIR, output_filename='explorer.ico')
create_deps.application_ffmpeg(app_dependencies_dir=APP_DEPS_DIR)


def app():
    # Resets the app_env
    app_env['total_urls'] = 0
    app_env['now_downloading'] = 0
    app_env['success_downloads'] = 0
    app_env['already_exists'] = 0
    app_env['failed_downloads'] = 0
    app_env['total_requests'] = 0

    # Asks if the user wants to download the songs from a text file or write them manually
    print(
        f'\n{Color.WHITE}[{Color.YELLOW}?{Color.WHITE}] {Color.YELLOW}You can download the songs from a local {Color.CYAN}text file '
        f'{Color.YELLOW}or {Color.CYAN}write manually{Color.YELLOW}.\n'
    )

    print(
        f'{Color.WHITE}[{Color.GREEN}!{Color.WHITE}] {Color.WHITE}To select a local text file, leave it blank and press ENTER.'
    )
    print(
        f'{Color.WHITE}[{Color.GREEN}!{Color.WHITE}] {Color.WHITE}To type manually, type in some URL (from YouTube) or song name and '
        f'press ENTER.\n'
    )

    print(
        f'{Color.WHITE}[{Color.RED}#{Color.WHITE}] {Color.RED}List of URLs/Queries - To choose a local text file, leave it blank and '
        f'press ENTER.'
    )
    user_response = input(f'{Color.WHITE} ›{Color.BLUE} ')

    user_response = user_response.strip()
    if len(user_response) == 0:
        app_utils.clsr(jump_lines=1)

        print(
            f'{Color.WHITE}[{Color.YELLOW}!{Color.WHITE}] {Color.YELLOW}Opening the file explorer for you to select the local '
            f'text file...\n'
        )

        root = Tk()
        root.withdraw()
        root.iconbitmap(Path(APP_ASSETS_DIR, 'explorer.ico'))

        # Opens a dialog window for selecting the input file
        input_file_path = filedialog.askopenfilename(
            title='Select a text file with the URLs/Queries',
            filetypes=[('All files', '*.*')],
        )

        app_utils.clsr(jump_lines=1)

        # Opens the file in read-only mode, specifying the encoding as UTF-8
        start_time = time()

        with open(input_file_path.strip(), 'r', encoding='utf-8') as fi:
            query_list = [
                line.strip() for line in fi.readlines() if len(line.strip()) != 0
            ]
    else:
        start_time = time()

        query_list = list()

        while len(user_response) != 0:
            query_list.append(user_response)
            user_response = input(f'{Color.WHITE} ›{Color.BLUE} ')
        app_env['total_urls'] = len(query_list)
        app_env['now_downloading'] = 0

        app_utils.clsr(jump_lines=1)
    youtube_urls = get_youtube_urls(query_list)
    app_env['total_urls'] = len(youtube_urls)

    app_env['now_downloading'] = 1
    for url in youtube_urls:
        download_music(url=url)
        app_env['now_downloading'] += 1

    # Deleting the temporary files folder
    rmtree(APP_TEMP_DIR, ignore_errors=True)

    print(
        f'{Color.WHITE}[{Color.GREEN}T{Color.WHITE}] {Color.GREEN}Runtime (total application execution time): '
        f'{Color.BLUE}{app_utils.format_seconds_to_time(seconds=int(time() - start_time))}'
    )
    print(
        f'{Color.WHITE}[{Color.GREEN}|{Color.WHITE}] {Color.GREEN}Saved (songs successfully downloaded and saved): '
        f'{Color.BLUE}{app_env["success_downloads"]}'
    )
    print(
        f'{Color.WHITE}[{Color.GREEN}|{Color.WHITE}] {Color.GREEN}Ignored (songs that already existed in the output folder): '
        f'{Color.BLUE}{app_env["already_exists"]}'
    )
    print(
        f'{Color.WHITE}[{Color.GREEN}L{Color.WHITE}] {Color.GREEN}Fails (songs not downloaded or unavailable): '
        f'{Color.BLUE}{app_env["failed_downloads"]}'
    )


while True:
    app()
    key = input(
        f'\n{Color.WHITE}[{Color.YELLOW}!{Color.WHITE}] {Color.YELLOW}Press ENTER to continue or anything else to exit...'
    )

    if key != '':
        break
    app_utils.clsr(jump_lines=1)
